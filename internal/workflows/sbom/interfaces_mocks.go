// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package sbom is a generated GoMock package.
package sbom

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSbomClient is a mock of SbomClient interface.
type MockSbomClient struct {
	ctrl     *gomock.Controller
	recorder *MockSbomClientMockRecorder
}

// MockSbomClientMockRecorder is the mock recorder for MockSbomClient.
type MockSbomClientMockRecorder struct {
	mock *MockSbomClient
}

// NewMockSbomClient creates a new mock instance.
func NewMockSbomClient(ctrl *gomock.Controller) *MockSbomClient {
	mock := &MockSbomClient{ctrl: ctrl}
	mock.recorder = &MockSbomClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSbomClient) EXPECT() *MockSbomClientMockRecorder {
	return m.recorder
}

// GetSbomForDepGraph mocks base method.
func (m *MockSbomClient) GetSbomForDepGraph(ctx context.Context, orgId, format string, req *GetSbomForDepGraphRequest) (*GetSbomForDepGraphResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSbomForDepGraph", ctx, orgId, format, req)
	ret0, _ := ret[0].(*GetSbomForDepGraphResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSbomForDepGraph indicates an expected call of GetSbomForDepGraph.
func (mr *MockSbomClientMockRecorder) GetSbomForDepGraph(ctx, orgId, format, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSbomForDepGraph", reflect.TypeOf((*MockSbomClient)(nil).GetSbomForDepGraph), ctx, orgId, format, req)
}

// MockHttpClient is a mock of HttpClient interface.
type MockHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientMockRecorder
}

// MockHttpClientMockRecorder is the mock recorder for MockHttpClient.
type MockHttpClientMockRecorder struct {
	mock *MockHttpClient
}

// NewMockHttpClient creates a new mock instance.
func NewMockHttpClient(ctrl *gomock.Controller) *MockHttpClient {
	mock := &MockHttpClient{ctrl: ctrl}
	mock.recorder = &MockHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClient) EXPECT() *MockHttpClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClient)(nil).Do), req)
}
